# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MBRShapefileGenerator
                                 A QGIS plugin
 This plugin is used to generate shapefiles of map based routing zones stored on the areapoint table
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-07
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Dan Cahoon
        email                : dcahoon@korterra.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import os
import logging
import pandas as pd
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mbr_shapefile_generator_dialog import MBRShapefileGeneratorDialog
from .utility import zoneid_suffixid_combine, split_geometry, build_multipolygon, REQUIRED_HEADERS


class LogHandler(logging.Handler):
    def __init__(self, list_widget):
        super().__init__()
        self.list_widget = list_widget

    def emit(self, record):
        msg = self.format(record)
        self.list_widget.addItem(msg)
        self.list_widget.scrollToBottom()


class MBRShapefileGenerator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MBRShapefileGenerator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MBR Shapefile Generator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.dlg = MBRShapefileGeneratorDialog()

        handler = LogHandler(self.dlg.log_list_widget)
        handler.setFormatter(logging.Formatter(
            '%(levelname)s - %(asctime)s - %(message)s'))
        self.logger = logging.getLogger()
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(handler)

        self._connect_signals()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MBRShapefileGenerator', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mbr_shapefile_generator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MBR Shapefile Generator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MBR Shapefile Generator'),
                action)
            self.iface.removeToolBarIcon(action)

    def _connect_signals(self):
        self.dlg.input_file_widget.fileChanged.connect(
            self.parse_initial_output_dir)
        self.dlg.input_file_widget.fileChanged.connect(
            self.read_file_to_dataframe)

    def read_file_to_dataframe(self) -> pd.DataFrame | None:
        """Takes the file path from the input file widget and reads the file into a pandas dataframe.
        The function checks if the file exists, if it is a file, and if it is a csv or xlsx file.
        Then it reads the file into a pandas dataframe and cleans it.

        Returns:
            pd.DataFrame | None: geometry dataframe if the file is read successfully, None otherwise.
        """
        path = self.dlg.input_file_widget.filePath()
        if not os.path.exists(path):
            self.logger.error("File does not exist %s", path)
            return None
        if not os.path.isfile(path):
            self.logger.error("File is not a file %s", path)
            return None
        if not path.endswith('.csv') and not path.endswith('.xlsx'):
            self.logger.error("File is not a csv or xlsx %s", path)
            return None
        if path.endswith('csv'):
            df = pd.read_csv(path)
            df = self.clean_dataframe(df)
            return df
        elif path.endswith('xlsx'):
            df = pd.read_excel(path)
            df = self.clean_dataframe(df)
            return df
        return None

    def clean_dataframe(self, df: pd.DataFrame) -> pd.DataFrame | None:
        """Cleans the dataframe by renaming the columns to lowercase and checking for required headers.
        It also creates a new column 'zoneid_suffixid' by combining the 'zoneid' and 'suffixid' columns 
        using the zoneid_suffixid_combine function.

        Args:
            df (pd.DataFrame): geometry dataframe

        Returns:
            pd.DataFrame | None: cleaned dataframe if the required headers are present, None otherwise.
        """
        df.columns = df.columns.str.lower()
        if not all(o in df.columns for o in REQUIRED_HEADERS):
            self.logger.error("Input file missing the following required headers: %s",
                              [o for o in REQUIRED_HEADERS if o not in df.columns])
            return None
        df['zoneid_suffixid'] = df.apply(zoneid_suffixid_combine, axis=1)
        return df

    def parse_initial_output_dir(self):
        """Changes the initial output directory widget to the directory of the input file in the input file widget.
        """
        path = self.dlg.input_file_widget.filePath()
        dir_path = os.path.dirname(path)
        if not os.path.exists(dir_path):
            self.logger.error("Output directory does not exist %s", dir_path)
            return None
        if not os.path.isdir(dir_path):
            self.logger.error(
                "Output directory is not a directory %s", dir_path)
            return None
        self.dlg.output_dir_file_widget.setFilePath(dir_path)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
